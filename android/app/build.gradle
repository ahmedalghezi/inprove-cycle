apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
import com.android.build.OutputFile

def useIntlJsc = false

project.ext.react = [
        // the name of the generated asset file containing your JS bundle
        bundleAssetName: "index.android.bundle",
        entryFile: "index.js",
        bundleCommand: "ram-bundle",
        bundleInDebug: false,
        bundleInRelease: true,
        devDisabledInStaging: true,
        root: "../../",
        jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
        jsBundleDirRelease: "$buildDir/intermediates/assets/release",
        resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
        resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
        inputExcludes: ["android/**", "ios/**"],
        nodeExecutableAndArgs: ["node"],
        extraPackagerArgs: [],
        enableHermes: false // clean and rebuild if changing
]

/*apply from: "../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"*/

def nativeModules = file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
if (nativeModules.exists()) {
    apply from: nativeModules
}
/*apply from: "../../node_modules/react-native/react.gradle"*/


apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = true
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", true)
def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

android {
    namespace "info.inprov.drip"
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "info.inprov.drip"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 16
        versionName "1.2404.19"
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    signingConfigs {
        release {
            storeFile file("C:/Users/chait/dripNew/2024/chaithrakb.jks")
            storePassword "Pass@123"
            keyAlias "android_keystore"
            keyPassword "Pass@123"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        debug {
            if (nativeArchitectures) {
                ndk {
                    abiFilters nativeArchitectures.split(',')
                }
            }
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    packagingOptions {
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation "com.facebook.react:react-native:+"
    implementation 'com.facebook.soloader:soloader:0.9.0+'
    implementation 'com.google.firebase:firebase-analytics:17.3.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-share')
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        if (useIntlJsc) {
            implementation 'org.webkit:android-jsc-intl:+'
        } else {
            implementation 'org.webkit:android-jsc:+'
        }
    }
    androidTestImplementation('com.wix:detox:+') { transitive = true }
    androidTestImplementation 'junit:junit:4.12'
}

// Ensure dependencies between tasks are dynamically managed
/*project.afterEvaluate {
    tasks.named('bundleReleaseJsAndAssets').configure {
        dependsOn ":react-native-vector-icons:compileReleaseAidl"
        dependsOn ":react-native-vector-icons:compileReleaseRenderscript"
        dependsOn ":react-native-vector-icons:packageReleaseResources"
        dependsOn ":react-native-vector-icons:generateReleaseResValues"
        dependsOn ":react-native-vector-icons:generateReleaseBuildConfig"
        dependsOn ":react-native-vector-icons:processReleaseManifest"
        dependsOn ":react-native-vector-icons:writeReleaseAarMetadata"
        dependsOn ":react-native-vector-icons:javaPreCompileRelease"
        dependsOn ":react-native-vector-icons:generateReleaseRFile"
        dependsOn ":react-native-vector-icons:mergeReleaseJniLibFolders"
        dependsOn ':react-native-vector-icons:compileReleaseJavaWithJavac'
        dependsOn ':react-native-vector-icons:syncReleaseLibJars'
        dependsOn ':react-native-vector-icons:extractReleaseAnnotations'
        dependsOn ':react-native-vector-icons:mergeReleaseGeneratedProguardFiles'
        dependsOn ':react-native-vector-icons:mergeReleaseShaders'
        dependsOn ':react-native-vector-icons:packageReleaseAssets'
        dependsOn ':react-native-vector-icons:copyReleaseJniLibsProjectAndLocalJars'
        dependsOn ':react-native-vector-icons:prepareReleaseArtProfile'
        dependsOn ':react-native-vector-icons:prepareLintJarForPublish'
        dependsOn ':react-native-vector-icons:bundleReleaseLocalLintAar'


        project.subprojects.each { subProject ->
            subProject.tasks.matching {
                it.name.toLowerCase().contains("release")
            }.all { task ->
                dependsOn task
            }
        }
    }
    tasks.named('mapReleaseSourceSetPaths').configure {
        dependsOn ":app:bundleReleaseJsAndAssets"
    }
    tasks.named('processReleaseMainManifest').configure {
        dependsOn ':app:copyReleaseBundledJs'
    }

    tasks.named('compressReleaseAssets').configure {
        dependsOn tasks.named('copyReleaseBundledJs')
    }

}*/




